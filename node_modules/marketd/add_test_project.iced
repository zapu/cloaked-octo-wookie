request = require 'request'
fs = require 'fs'

assert = (st) -> throw new Error() if st == false

StringifyAll = (value) -> JSON.stringify value, (key, val) ->
	if typeof val == 'function'
		val.toString()
	else 
		val

postRequest = (addr, fields, files, cb) ->
	r = request.post addr, (err, res, b) -> cb err, res, b
	form = r.form()
	for key, val of fields
		form.append key, val
	for key, val of files
		form.append key, val.data, filename: val.filename 

AppAddress = 'http://127.0.0.1:8080/'
VM_Path = "H:\\vcloud\\test.ova"

await postRequest AppAddress + 'addProject', 
	{
		pub_key: 1 
		program: fs.createReadStream VM_Path
	}, {},
	defer error, response, body

console.log error, response, body
assert !error and response.statusCode == 200

body_obj = JSON.parse body

project_id = body_obj.id

addWork = (work, autocb) ->
	await postRequest AppAddress + 'addWork',
	{ pub_key: 1, project_id: project_id },
	{ data: { filename: 'data.json', data: JSON.stringify work }},
	defer error, response, body

	throw error if error

addAllWork = (list, window, autocb) ->
	rv = new iced.Rendezvous
	nsent = 0
	ndone = 0

	while ndone < list.length
		if nsent - ndone < window and nsent < list.length
			addWork list[nsent], rv.id(nsent).defer()
			nsent++
		else
			await rv.wait defer evid
			ndone++


works = []
for i in [0..10]
	works.push { from: (i*50000), to: ((i+1)*50000)-1 }

await addAllWork works, 5, defer()

console.log 'all done'