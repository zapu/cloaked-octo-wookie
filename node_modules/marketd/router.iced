url = require 'url'

`normalize = function(path, keys, sensitive, strict)
{
  if (path instanceof RegExp) return path;
  path = path
    .concat(strict ? '' : '/?')
    .replace(/\/\(/g, '(?:/')
    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional){
      keys.push({ name: key, optional: !! optional });
      slash = slash || '';
      return ''
        + (optional ? '' : slash)
        + '(?:'
        + (optional ? slash : '')
        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
        + (optional || '');
    })
    .replace(/([\/.])/g, '\\$1')
    .replace(/\*/g, '(.*)');
  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
}`

class Router
	constructor: ->
		@routes = []

	addRoute: (path, func) ->
		keys = []
		regexp = normalize path, keys, false, false

		route = 
			regexp: regexp
			keys: keys
			func: func

		@routes.push(route)

	tryRoute: (path, request, response, route) ->
		match = path.match(route.regexp)
		if(match == null)
			return false

		params = {}
		for i in [1 .. match.length-1]
			params[i] = decodeURIComponent(match[i])

		for key, i in route.keys
			params[key.name] = params[i+1]

		route.func(request, response, params)
		return true

	routeRequest: (request, response) ->
		pathname = url.parse(request.url).pathname

		for route in @routes
			if @tryRoute(pathname, request, response, route)
				return true

		return false


module.exports = Router