db = require './couch'

clamp = (val, low, high) -> Math.max low, Math.min high, val

calculationCorrectness = (node, project_id, cb) ->
	await db.view 'market/calculation_correctness_per_node',
		{
			startkey: [project_id]
			endkey: [project_id, {}]
			reduce: true
			group: true
		},
		defer err, dbres

	node_score = 0
	max_score = 0

	for val in dbres
		if val.key[1] == node
			node_score = val.value
		
		max_score = Math.max max_score, val.value

	cb node_score, max_score

module.exports.R = (pub_key, project_id, autocb) ->
	await calculationCorrectness pub_key, project_id, defer node_score, max_score

	if max_score == 0
		return 0
	else
		return node_score / max_score

module.exports.randR = (pub_key, project_id, autocb) ->
	await module.exports.R pub_key, project_id, defer R
	return clamp(R + (Math.random() * 0.2 - 0.1), 0, 1)