handleDbError = (err) ->
	return dbError: err

module.exports.getProject = (db, seller_pub_key, cb) ->
	# Shouldn't we be working on something?
	await db.view 'market/projects_with_participants', 
		startKey: [seller_pub_key], endKey: [seller_pub_key, {}]
		defer err, dbres

	return cb handleDbError err if err

	# seller is already on a project, return it
	if(dbres.length > 0)
		return cb null, dbres[0].value

	await db.view 'market/projects_by_ids', defer err, dbres
	return cb handleDbError err if err

	# Very sophisticated algorithm to select project goes here:
	project_doc = dbres[0].value

	project_doc.participants.push seller_pub_key

	# Add seller_pub_key as participant, insert into db
	await db.merge project_doc, defer err, dbres
	return cb handleDbError err if err

	return cb null, project_doc

module.exports.getWork = (db, seller_pub_key, project_id, cb) ->
	# Are we even on the project?
	await db.view 'market/projects_with_participants', 
		key: [seller_pub_key, project_id], 
		defer err, dbres

	return cb handleDbError err if err

	# seller_pub_key is not a participant of the project
	if dbres.length == 0
		return cb logicError: "seller_pub_key #{seller_pub_key} not on project #{project_id}"

	await db.view 'market/work_by_project_ids_and_requests',
		key: [seller_pub_key, project_id], 
		defer err, dbres

	return cb handleDbError err if err

	# Seller is already doing work, return it
	if dbres.length != 0
		return cb null, dbres[0].value

	await db.view 'market/work_unconfirmed_by_project_ids', key: project_id, 
		defer err, dbres

	return cb handleDbError err if err

	# All work is confirmed in this project
	if dbres.length == 0
		return cb null, null

	work_candidates = []
	for doc in dbres
		work = doc.value
		sellerWorkedOn = (w) ->
			for result in w.results
				if result.seller = seller_pub_key
					return true
			return false

		unless sellerWorkedOn work
			work_candidates.push work

	# *Seller* has no more work in this project
	if work_candidates.length == 0
		return cb null, null

	return cb null, work_candidates[Math.floor Math.random() * work_candidates.length]
