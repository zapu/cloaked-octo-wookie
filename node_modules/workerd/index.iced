request = require 'request'
vm = require 'vm'
project_download = require './project_download'

postRequest = require './postRequest'

wrapError = (error, response, body) ->
	obj = {}
	obj.error = error if error?
	obj.code = response.statusCode if response.statusCode != 200
	obj.body = body if body?

	return obj

getProject = (address, pub_key, cb) ->
	await postRequest address + 'getProject', { pub_key }, {}, 
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	obj = JSON.parse body
	return cb null, obj

getWork = (address, project_id, pub_key, cb) ->
	await postRequest address + 'getWork', { pub_key, project_id }, {},
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	obj = JSON.parse body
	return cb null, obj

runProgram = (programString, data) ->
	ctx = 
		WorkData: data
	vm.runInNewContext("ResultData = (" + programString + ")(WorkData);", ctx, "programString");
	return ctx.ResultData

appAddress = 'http://127.0.0.1:8080/'
sellerPublicKey = '123'

await getProject appAddress, sellerPublicKey, defer err, project
throw err if err

await project_download appAddress, sellerPublicKey, project._id, defer err, filename

console.log 'working on project', project._id

await getWork appAddress, project._id, sellerPublicKey, defer err, work
throw err if err

console.log 'got work', work._id

results = runProgram JSON.parse(project.program), JSON.parse(work.data)