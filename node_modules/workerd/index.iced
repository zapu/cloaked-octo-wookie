request = require 'request'
fs = require 'fs'
crypto = require 'crypto'
path = require 'path'

project_download = require './project_download'
virtual_machine = require './virtual_machine'
work_server = require './work_server'

postRequest = require './postRequest'

wrapError = (error, response, body) ->
	obj = {}
	obj.error = error if error?
	obj.code = response?.statusCode if response?.statusCode != 200
	obj.body = body.toString() if body?

	return new Error("Error: " + obj.error + "\ncode: " + obj.code + "\nbody: " + obj.body)

getProject = (address, pub_key, cb) ->
	await postRequest address + 'getProject', { pub_key }, {}, 
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	obj = JSON.parse body
	return cb null, obj

getWork = (address, project_id, pub_key, cb) ->
	await postRequest address + 'getWork', { pub_key, project_id }, {},
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	return cb null, body

downloadWork = (address, work_id, pub_key, cb) ->
	await postRequest address + 'downloadWork', { pub_key, work_id }, {},
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	return cb null, body

submitWork = (address, work_id, data, pub_key, cb) ->
	await postRequest address + 'submitWork', 
		{ pub_key, work_id, data }, 
		{ },
		defer error, response, body

	if error or response.statusCode != 200
		return cb wrapError error, response, body

	return cb null, body

appAddress = 'http://127.0.0.1:8080/'
sellerPublicKey = process.argv[2]
throw "No public key (process.argv[2])" unless sellerPublicKey?

await getProject appAddress, sellerPublicKey, defer err, project
throw err if err

await project_download appAddress, sellerPublicKey, project._id, defer err, filename
throw err if err

console.log 'working on project', project._id

await virtual_machine path.join(filename, 'program.ova'), defer()

iter = 1

work_server.startServer()

while true
	await getWork appAddress, project._id, sellerPublicKey, defer err, work
	throw err if err

	work = JSON.parse work.toString()
	console.log "got work #{iter}"
	iter++

	await downloadWork appAddress, work._id, sellerPublicKey, defer err, workData

	work_server.setWork workData

	console.log "Waiting for results..."

	await work_server.wait defer workFile

	workResult = fs.createReadStream workFile.path

	console.log "Submitting work..."

	await submitWork appAddress, work._id, workResult, sellerPublicKey, defer err, body
	throw err if err

	console.log "Done"
